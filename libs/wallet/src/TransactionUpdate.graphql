fragment TransactionResultEvent on TransactionResult {
  partyId
  hash
  status: status
  error
}

fragment WithdrawalEvent on Withdrawal {
  id
  withdrawalStatus: status
  amount
  asset {
    id
    name
    symbol
    decimals
    status
    source {
      ... on ERC20 {
        contractAddress
      }
    }
  }
  createdTimestamp
  withdrawnTimestamp
  txHash
  details {
    ... on Erc20WithdrawalDetails {
      receiverAddress
    }
  }
  pendingOnForeignChain @client
}

fragment OrderEvent on Order {
  type
  id
  orderStatus: status
  rejectionReason
  createdAt
  size
  price
  timeInForce
  expiresAt
  side
  market {
    id
    decimalPlaces
    positionDecimalPlaces
    tradableInstrument {
      instrument {
        name
      }
    }
  }
}

fragment DepositEvent on Deposit {
  id
  depositStatus: status
  amount
  asset {
    id
    symbol
    decimals
  }
  createdTimestamp
  creditedTimestamp
  txHash
}

subscription TransactionUpdate($partyId: ID!) {
  busEvents(
    partyId: $partyId
    batchSize: 0
    types: [Withdrawal, Deposit, TransactionResult, Order]
  ) {
    event {
      ... on Deposit {
        ...DepositEvent
      }
      ... on TransactionResult {
        ...TransactionResultEvent
      }
      ... on Order {
        ...OrderEvent
      }
      ... on Withdrawal {
        ...WithdrawalEvent
      }
    }
  }
}
